<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nicolas Ferreira</title>
    <description>Greetings! This is a passionate Software Engineer's personal portfolio, and blog about java and javascript website.</description>
    <link>http://nickrfer.com/pt/</link>
    <atom:link href="http://nickrfer.com/pt/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 02 Aug 2017 23:18:21 -0300</pubDate>
    <lastBuildDate>Wed, 02 Aug 2017 23:18:21 -0300</lastBuildDate>
    <generator>Jekyll v3.4.5</generator>
    
      <item>
        <title>Dicas para realizar consultas com JPA com Performance</title>
        <description>&lt;h4 class=&quot;center-align bold&quot;&gt;Dicas para realizar consultas com JPA com Performance&lt;/h4&gt;
&lt;h6 class=&quot;center-align bold&quot;&gt;July 31, 2017&lt;/h6&gt;
&lt;br /&gt;

&lt;div class=&quot;container post&quot;&gt;
  &lt;p&gt;&lt;img src=&quot;http://nickrfer.com/img/jpa-performance.jpeg&quot; /&gt;
  &lt;p&gt;Olá leitores. Faz um tempinho que não posto!&lt;/p&gt;
  &lt;p&gt;Neste artigo irei compartilhar algumas dias que irão ajudar sua aplicação a ter uma performance mais rápida usando JPA, 
    e Hibernate como provedor da especificação. JPA pode causar bastante dor de cabeça se não for usado da forma correta desde o início do projeto.
    Em algumas empresas, este framework conseguiu uma reputação tão ruim ao ponto de que muitas operações acabam tendo que ser feita utilizar JDBC puro.
  &lt;/p&gt;
  &lt;p&gt;
    Para garantir que consultas com JPA irão ter boa performance, basicamente precisamos ter os seguintes pontos em mente:
    &lt;ul&gt;
      &lt;li&gt;Carregamento Eager e Lazy;&lt;/li&gt;
      &lt;li&gt;Paginação de dados;&lt;/li&gt;
      &lt;li&gt;Considere não utilizar 'Select * FROM';&lt;/li&gt;
      &lt;li&gt;Não consulte dentro de um loop;&lt;/li&gt;
      &lt;li&gt;Não tenha medo de usar SQL Nativo.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/p&gt;

  &lt;h5 class=&quot;bold&quot;&gt;Carregamento Eager e Lazy&lt;/h5&gt;
  &lt;p&gt;
    Carregamento eager acontece para atributos anotados com @ManyToOne por padrão, e quando explicitamente declarados com FetchType.EAGER.
    O que isto significa é que toda vez que uma entidade é recuperada do banco, outro SELECT será disparado para cada atributo eager.
  &lt;/p&gt;
  &lt;p&gt;
    Por este motivo, eu sempre utilizo as anotações @OneToMany and @ManyToOne com FetchType.LAZY.
    Quando eu preciso carregar o atributo lazy, utilizo a palavra-chave &quot;fetch&quot;, e em alguns uma Query à parte pode ser disparada também. Por exemplo:
  &lt;/p&gt;
    &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;per&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;per&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;JOIN&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FETCH&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;per&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addressList&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;adr&lt;/span&gt;
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
  &lt;h5 class=&quot;bold&quot;&gt;Paginação de dados&lt;/h5&gt;
  &lt;p&gt;
    Em 99% dos casos em que você precisa carregar dados de uma tabela com muitos registros, você não precisa recuperar tudo.
    Dito isso, a não ser que você esteja consultando uma tabela pequena que garante que não haverá crescimento exponencial, pagine sua query utilizando a seguinte sintaxe sempre que possível:
  &lt;/p&gt;
    &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Query&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;query&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entityManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createQuery&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SELECT per from Person per&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pageNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pageSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setFirstResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pageNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pageSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setMaxResults&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pageSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;personList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getResultList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
  &lt;h5 class=&quot;bold&quot;&gt;Considere não utilizar 'Select * FROM'&lt;/h5&gt;
  &lt;p&gt;
    Se você está consultando uma tabela que possui mais de 30 atributos, esta sintaxe pode causar lentidão no banco.
    Também pode ocorrer uma grande lentidão se algum destes atributos forem do tipo BLOB ou CLOB. Eu já vi uma página
    que carregava um atributo BLOB demorar 30 segundos para carregar, para menos de um segundo após a query ser alterada para carregar atributos específicos.
  &lt;/p&gt;
  &lt;p&gt;
    Nestes casos é preferível que você crie um VO (Value Object) que irá conter os atributos específicos da tabela necessários para sua funcionalidade.
  &lt;/p&gt;

  &lt;h5 class=&quot;bold&quot;&gt;Não consulte dentro de um loop&lt;/h5&gt;
  &lt;p&gt;
    Geralmente é melhor carregar todos os dados em um comando só, utilizando JOIN FETCH por exemplo.
    Porém, isso nem sempre é possível. Mas independente do que você fizer, não consulte dentro de um loop.
  &lt;/p&gt;
  &lt;p&gt;
    Tente ao máximo criar a query que irá recuperar todos os dados (podendo ser páginada se forem muitos registros).
    Só tome cuidado na utilização do operador IN para recuperar dependências. O comando IN costuma causar lentidão no banco se utilizado
    com mais de 100 registros.
  &lt;/p&gt;
  &lt;p&gt;
    Existem algumas técnicas que são mais rápidas do que utilizar IN, como:
    &lt;ul&gt;
      &lt;li&gt;Criar uma tabela temporária com os parâmetros do IN;&lt;/li&gt;
      &lt;li&gt;Utilizar XMLTable para passar os valores que seriam passados no IN (se o banco possuir suporte).&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/p&gt;

  &lt;h5 class=&quot;bold&quot;&gt;Não tenha medo de usar SQL Nativo&lt;/h5&gt;
  &lt;p&gt;
    O banco de dados pode otimizar muito o seu processo. Então utilize-o em seu favor.
    Se o processo pode ser otimizado para recuperar/inserir todos os dados em um ou mais comandos SQLs, que seriam mais
    lentos se executados de individualmente no código Java, não tenha medo de usar SQL Nativo.
  &lt;/p&gt;
  &lt;p&gt;
    Por exemplo, um processo feito no Java dessa forma:
    &lt;ul&gt;
      &lt;li&gt;Iterar o input passado pelo usuário;&lt;/li&gt;
      &lt;li&gt;Para cada item, atualizar mais de 10000 registros e inserir os dados;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/p&gt;
  &lt;p&gt;
    Poderia ficar bem mais rápido e otimizado se feito desta forma:
    &lt;ul&gt;
      &lt;li&gt;Criar uma trigger em uma tabela que será responsável por atualizar os 10000 registros;&lt;/li&gt;
      &lt;li&gt;Criar uma tabela temporária e inserir todos os dados nela;&lt;/li&gt;
      &lt;li&gt;Executar um comando que efetua um 'INSERT SELECT' da tabela temporária para a definitiva;&lt;/li&gt;
      &lt;li&gt;Como somente um comando foi disparado, a trigger será ativada somente uma vez, fazendo com que a operação tenha muita chance de se tornar muito mais rápida;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/p&gt;

  &lt;h5 class=&quot;bold&quot;&gt;Conclusão&lt;/h5&gt;
  &lt;p&gt;Conforme descrito neste artigo, JPA pode ser usado sem que hajam problemas de performance, se o uso correto do mesmo for reforçado.
    Eu espero que a informação apresentada aqui tenha sido útil. Até a próxima!&lt;/p&gt;
&lt;/div&gt;
</description>
        <pubDate>Mon, 31 Jul 2017 21:20:00 -0300</pubDate>
        <link>http://nickrfer.com/pt/2017/07/jpa-querying-performance-tips</link>
        <guid isPermaLink="true">http://nickrfer.com/pt/2017/07/jpa-querying-performance-tips</guid>
        
        
        <category>jpa</category>
        
        <category>query</category>
        
        <category>performance</category>
        
        <category>tips</category>
        
      </item>
    
      <item>
        <title>Revisão de código com Codebrag</title>
        <description>&lt;h4 class=&quot;center-align bold&quot;&gt;Revisão de código com Codebrag&lt;/h4&gt;
&lt;br /&gt;

&lt;div class=&quot;container post&quot;&gt;
  &lt;p&gt;Being software crafters, my team mates and I always strive to adhere to clean code practices. Solving the business need with the
    simplest approach possible, as stated in the KISS (Keep It Simple Stupid) principle, creating small functions that does only one thing
    (Single Responsibility), making the code self documented and easy to understand.
  &lt;/p&gt;
  &lt;p&gt;Occasionally there's always some new API or component that you didn't know about, or perhaps a better way to write the story your code is telling.
    There's also the situation where a feature or a bug fix must be implemented in a rush and the developer has to make some tradeoffs.
    This is where code review comes in.
  &lt;/p&gt;
  &lt;p&gt;
    There are many open source tools for this job, but my team has chosen
    &lt;a href=&quot;https://github.com/softwaremill/codebrag&quot;&gt;Codebrag&lt;/a&gt; mainly because it supports SVN and it's interface is user friendly.
  &lt;/p&gt;

  &lt;h5 class=&quot;bold&quot;&gt;Using Codebrag&lt;/h5&gt;
  &lt;p style=&quot;margin-bottom: 0px !important;&quot;&gt;
    This open source tool is easy to install and configure, basically all you have to do is:
    &lt;ul&gt;
      &lt;li&gt;Install Git and the JDK 7;&lt;/li&gt;
      &lt;li&gt;Download the latest distribution at codebrag.com;&lt;/li&gt;
      &lt;li&gt;Extract the zip file;&lt;/li&gt;
      &lt;li&gt;Download your repository using Git and put it in the repo directory:
        &lt;div&gt;
          &lt;ul&gt;
            &lt;li class=&quot;sub-item&quot;&gt;For Git repo, just use &lt;code&gt;git clone&lt;/code&gt;&lt;/li&gt;
            &lt;li class=&quot;sub-item&quot;&gt;And for SVN repo, you have to use &lt;code&gt;git svn clone&lt;/code&gt; (in my case I had to specify the --username parameter,
              and the specific revision instead of HEAD, which turned out like this
              &lt;code&gt;git svn clone --username myuser -r140123 https://mysvnrepo.com&lt;/code&gt;)&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;Edit the codebrag.conf file, where you can put your repo's username and password, and some app related configuration.&lt;/li&gt;
      &lt;li&gt;Run the codebrag.bat file in case you're using Windows, or codebrag.sh for linux, and it is running!&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/p&gt;

  &lt;p&gt;
    Having done that, enter the app and register your email, username and password. After that, the home page will load with the unreviewed commits.
    You can register other members by clicking on the invite team members menu and sharing the link it generates with them.&lt;/p&gt;
  &lt;p&gt;
    Here's a demonstration of how to review someone else's commit:
  &lt;/p&gt;

  &lt;div class=&quot;center&quot;&gt;
    &lt;video class=&quot;howto-video&quot; controls&gt;
      &lt;source src=&quot;/img/codebrag-review.mp4&quot; type=&quot;video/mp4&quot;&gt;
    &lt;/video&gt;
  &lt;/div&gt;
  &lt;br /&gt;
  &lt;p&gt;
    Now I have logged in as the reviewed commit's owner, in order to demonstrate how to do a follow-up:
  &lt;/p&gt;

  &lt;div class=&quot;center&quot;&gt;
    &lt;video class=&quot;howto-video&quot; controls&gt;
      &lt;source src=&quot;/img/codebrag-followup.mp4&quot; type=&quot;video/mp4&quot;&gt;
    &lt;/video&gt;
  &lt;/div&gt;
  &lt;br /&gt;

  &lt;h5 class=&quot;bold&quot;&gt;Conclusion&lt;/h5&gt;

  &lt;p&gt;This is it for this tutorial, check out the &lt;a href=&quot;https://github.com/softwaremill/codebrag/wiki&quot;&gt;Codebrag Wiki&lt;/a&gt;
    for more specific information, and the &lt;a href=&quot;https://devchat.tv/ruby-rogues/216-rr-code-review-culture-with-derek-prior&quot;&gt;
    Ruby Rogues 216: RR Code Review Culture With Derek Prior&lt;/a&gt; for a great discussion on code review, and stay tuned for more blog posts to come!
  &lt;/p&gt;
&lt;/div&gt;
</description>
        <pubDate>Sat, 26 Nov 2016 00:25:55 -0200</pubDate>
        <link>http://nickrfer.com/pt/2016/11/code-review-with-codebrag</link>
        <guid isPermaLink="true">http://nickrfer.com/pt/2016/11/code-review-with-codebrag</guid>
        
        
        <category>code</category>
        
        <category>review</category>
        
        <category>codebrag</category>
        
      </item>
    
  </channel>
</rss>
